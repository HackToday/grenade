#!/usr/bin/env bash

# ``upgrade-nova``

echo "*********************************************************************"
echo "Begin $0"
echo "*********************************************************************"

# Clean up any resources that may be in use
cleanup() {
    set +o errexit

    echo "*********************************************************************"
    echo "ERROR: Abort $0"
    echo "*********************************************************************"

    # Kill ourselves to signal any calling process
    trap 2; kill -2 $$
}

trap cleanup SIGHUP SIGINT SIGTERM

# Keep track of the grenade directory
GRENADE_DIR=$(cd $(dirname "$0") && pwd)

# Import common functions
source $GRENADE_DIR/functions

# Determine what system we are running on.  This provides ``os_VENDOR``,
# ``os_RELEASE``, ``os_UPDATE``, ``os_PACKAGE``, ``os_CODENAME``
# and ``DISTRO``
GetDistro

# Source params
source $GRENADE_DIR/grenaderc

# This script exits on an error so that errors don't compound and you see
# only the first error that occured.
set -o errexit

# Print the commands being run so that we can see the command that triggers
# an error.  It is also useful for following allowing as the install occurs.
set -o xtrace

# Set for DevStack compatibility
TOP_DIR=$TARGET_DEVSTACK_DIR


# Upgrade Nova
# ============

# Kill running Nova processes
for serv in n-api n-cauth n-cpu n-crt n-net n-novnc n-obj n-sch n-vol n-xvnc; do
    screen -S $SCREEN_NAME -p $serv -X kill
done

MYSQL_HOST=${MYSQL_HOST:-localhost}
MYSQL_USER=${MYSQL_USER:-root}
BASE_SQL_CONN=$(source $BASE_DEVSTACK_DIR/stackrc; echo ${BASE_SQL_CONN:-mysql://$MYSQL_USER:$MYSQL_PASSWORD@$MYSQL_HOST})

# Duplicate some setup bits from target DevStack
cd $TARGET_DEVSTACK_DIR
source $TARGET_DEVSTACK_DIR/stackrc

# From stack.sh
FLOATING_RANGE=${FLOATING_RANGE:-172.24.4.224/28}
FIXED_RANGE=${FIXED_RANGE:-10.0.0.0/24}
HOST_IP=$(get_default_host_ip $FIXED_RANGE $FLOATING_RANGE "$HOST_IP_IFACE" "$HOST_IP")
if [ "$HOST_IP" == "" ]; then
    die $LINENO "Could not determine host ip address. Either localrc specified dhcp on ${HOST_IP_IFACE} or defaulted"
fi
SERVICE_HOST=${SERVICE_HOST:-$HOST_IP}

SERVICE_TENANT_NAME=${SERVICE_TENANT_NAME:-service}
S3_SERVICE_PORT=${S3_SERVICE_PORT:-8080}
source $TARGET_DEVSTACK_DIR/lib/database

# Just do this rather than bring in all of glance
GLANCE_HOSTPORT=$SERVICE_HOST:9292

SYSLOG=`trueorfalse False $SYSLOG`

# Get functions from current DevStack
source $TARGET_DEVSTACK_DIR/lib/rpc_backend
source $TARGET_DEVSTACK_DIR/lib/keystone
source $TARGET_DEVSTACK_DIR/lib/nova
source $TARGET_DEVSTACK_DIR/lib/baremetal
source $TARGET_DEVSTACK_DIR/lib/neutron

# install_neutronclient()
install_neutronclient

NOVNC_DIR=$DEST/noVNC

# Save current config files for posterity
[[ -d $SAVE_DIR/etc.nova ]] || cp -pr $NOVA_CONF_DIR $SAVE_DIR/etc.nova

# install_nova()
install_novaclient
install_nova

# configure_nova()
# configure_nova


# upgrade rootwrap configs
configure_nova_rootwrap

# Create nova.conf
# create_nova_conf

#add nova v3 endpoint for blue-print:nova-v3-api-tests
source $TARGET_DEVSTACK_DIR/openrc admin admin

if [[ "$ENABLED_SERVICES" =~ "n-api" && "$KEYSTONE_CATALOG_BACKEND" = 'sql' ]]; then
    NOVA_V3_SERVICE=$(keystone service-create \
        --name=nova \
        --type=computev3 \
        --description="Nova Compute Service V3" \
        | grep " id " | get_field 2)
    keystone endpoint-create \
        --region RegionOne \
        --service_id $NOVA_V3_SERVICE \
        --publicurl "$SERVICE_PROTOCOL://$NOVA_SERVICE_HOST:$NOVA_SERVICE_PORT/v3" \
        --adminurl "$SERVICE_PROTOCOL://$NOVA_SERVICE_HOST:$NOVA_SERVICE_PORT/v3" \
        --internalurl "$SERVICE_PROTOCOL://$NOVA_SERVICE_HOST:$NOVA_SERVICE_PORT/v3"
fi

if [[ "$KEYSTONE_CATALOG_BACKEND" != 'sql' &&  -f "$KEYSTONE_CATALOG" ]]; then
    stop_keystone
    echo -e "
catalog.RegionOne.computev3.publicURL = http://%SERVICE_HOST%:8774/v3
catalog.RegionOne.computev3.adminURL = http://%SERVICE_HOST%:8774/v3
catalog.RegionOne.computev3.internalURL = http://%SERVICE_HOST%:8774/v3
catalog.RegionOne.computev3.name = Compute Service V3
" >> $KEYSTONE_CATALOG
    start_keystone
fi

#enable nova_v3_api
if ! grep -q "^\[composite:osapi_compute\]" $NOVA_API_PASTE_INI; then
    # Add section at the end
    echo -e "\n[composite:osapi_compute]\nuse = call:nova.api.openstack.urlmap:urlmap_factory" >> $NOVA_API_PASTE_INI
fi
sed -i -e "/^\[composite:osapi_compute\]/ a\\
/v3: openstack_compute_api_v3
" "$NOVA_API_PASTE_INI"

iniset $NOVA_API_PASTE_INI composite:openstack_compute_api_v3 use  call:nova.api.auth:pipeline_factory
iniset $NOVA_API_PASTE_INI composite:openstack_compute_api_v3 noauth  "faultwrap sizelimit noauth ratelimit osapi_compute_app_v3"
iniset $NOVA_API_PASTE_INI composite:openstack_compute_api_v3 keystone  "faultwrap sizelimit authtoken keystonecontext ratelimit osapi_compute_app_v3"
iniset $NOVA_API_PASTE_INI composite:openstack_compute_api_v3 keystone_nolimit  "faultwrap sizelimit authtoken keystonecontext osapi_compute_app_v3"
iniset $NOVA_API_PASTE_INI app:osapi_compute_app_v3 paste.app_factory  nova.api.openstack.compute:APIRouterV3.factory
iniset $NOVA_CONF osapi_v3 enabled  True

#add policy for v3 api
sed -i -e "1 a\\
`grep "v3:" $NOVA_DIR/etc/nova/policy.json | sed 's#,#,\\\#g'`
" $NOVA_CONF_DIR/policy.json

# Simulate init_nova()
create_nova_cache_dir
create_nova_keys_dir

# Migrate the database
nova-manage --config-file $NOVA_CONF db sync || die $LINENO "DB sync error"

# Start Nova
start_nova_api
start_nova

set +o xtrace
echo "*********************************************************************"
echo "SUCCESS: End $0"
echo "*********************************************************************"
