#!/usr/bin/env bash

# ``upgrade-nova``

echo "*********************************************************************"
echo "Begin $0"
echo "*********************************************************************"

# Clean up any resources that may be in use
cleanup() {
    set +o errexit

    echo "*********************************************************************"
    echo "ERROR: Abort $0"
    echo "*********************************************************************"

    # Kill ourselves to signal any calling process
    trap 2; kill -2 $$
}

trap cleanup SIGHUP SIGINT SIGTERM

# Keep track of the grenade directory
GRENADE_DIR=$(cd $(dirname "$0") && pwd)

# Import common functions
source $GRENADE_DIR/functions

# Determine what system we are running on.  This provides ``os_VENDOR``,
# ``os_RELEASE``, ``os_UPDATE``, ``os_PACKAGE``, ``os_CODENAME``
# and ``DISTRO``
GetDistro

# Source params
source $GRENADE_DIR/grenaderc

# This script exits on an error so that errors don't compound and you see
# only the first error that occured.
set -o errexit

# Print the commands being run so that we can see the command that triggers
# an error.  It is also useful for following allowing as the install occurs.
set -o xtrace


# Upgrade Nova
# ============

# Kill running Nova processes
for serv in n-api n-cauth n-cpu n-crt n-net n-novnc n-obj n-sch n-vol n-xvnc; do
    screen -S $SCREEN_NAME -p $serv -X kill
done

QUANTUMCLIENT_DIR=$DEST/python-quantumclient
QUANTUM_DIR=$DEST/quantum

SYSLOG=`trueorfalse False $SYSLOG`

# Duplicate some setup bits from trunk DevStack
cd $TRUNK_DEVSTACK_DIR
source $TRUNK_DEVSTACK_DIR/stackrc

# Get functions from current DevStack
source $TRUNK_DEVSTACK_DIR/lib/nova

NOVNC_DIR=$DEST/noVNC

# install_quantumclient()
[[ -d $QUANTUMCLIENT_DIR ]] && sudo chown -R `whoami` $QUANTUMCLIENT_DIR
git_clone $QUANTUM_CLIENT_REPO $QUANTUMCLIENT_DIR $QUANTUM_CLIENT_BRANCH
setup_develop $QUANTUMCLIENT_DIR

# install_nova()
sudo chown -R `whoami` $NOVACLIENT_DIR $NOVA_DIR
install_novaclient
install_nova

# configure_quantumclient()
setup_develop $QUANTUMCLIENT_DIR

# configure_nova()
configure_novaclient
setup_develop $NOVA_DIR

# ``nova.conf``
# Normally created from scratch on each run if ``stack.sh``
# Until we can call that without duplicating the code just convert the old one

[[ -r $NOVA_CONF.$START_RELEASE ]] || \
    cp -p $NOVA_CONF $NOVA_CONF.$START_RELEASE
cp -p $NOVA_CONF.$START_RELEASE $NOVA_CONF

#+libvirt_cpu_mode=none
iniset $NOVA_CONF DEFAULT libvirt_cpu_mode none

#-connection_type=libvirt
#+compute_driver=libvirt.LibvirtDriver
# if not OpenVZ - not supported...leave in even if it is the default
if [[ "$(iniget $NOVA_CONF DEFAULT connection_type)" == "libvirt" ]]; then
    # Explicitly set the new default value
    inicomment $NOVA_CONF DEFAULT connection_type
    iniset $NOVA_CONF DEFAULT compute_driver libvirt.LibvirtDriver
fi
if [[ "$(iniget $NOVA_CONF DEFAULT connection_type)" == "xenapi" ]]; then
    # Explicitly set the new default value
    inicomment $NOVA_CONF DEFAULT connection_type
    iniset $NOVA_CONF DEFAULT compute_driver xenapi.XenAPIDriver
fi

if [ "$SYSLOG" != "False" ]; then
    iniset $NOVA_CONF DEFAULT use_syslog True
fi
#+logging_context_format_string=%(asctime)s %(levelname)s %(name)s [%(request_id)s %(user_name)s %(project_name)s] %(instance)s%(message)s
if [ "$LOG_COLOR" == "True" ] && [ "$SYSLOG" == "False" ]; then
    # Add color to logging output
    iniset $NOVA_CONF DEFAULT  logging_context_format_string "%(asctime)s %(color)s%(levelname)s %(name)s [[01;36m%(request_id)s [00;36m%(user_name)s %(project_name)s%(color)s] [01;35m%(instance)s%(color)s%(message)s[00m"
    iniset $NOVA_CONF DEFAULT  logging_default_format_string "%(asctime)s %(color)s%(levelname)s %(name)s [[00;36m-%(color)s] [01;35m%(instance)s%(color)s%(message)s[00m"
    iniset $NOVA_CONF DEFAULT  logging_debug_format_suffix "[00;33mfrom (pid=%(process)d) %(funcName)s %(pathname)s:%(lineno)d[00m"
    iniset $NOVA_CONF DEFAULT  logging_exception_prefix "%(color)s%(asctime)s TRACE %(name)s [01;35m%(instance)s[00m"
else
    # Show user_name and project_name instead of user_id and project_id
    iniset $NOVA_CONF DEFAULT  logging_context_format_string "%(asctime)s %(levelname)s %(name)s [%(request_id)s %(user_name)s %(project_name)s] %(instance)s%(message)s"
fi

if [ -n "$NOVA_STATE_PATH" ]; then
    iniset $NOVA_CONF DEFAULT state_path $NOVA_STATE_PATH
    mkdir -p $NOVA_STATE_PATH
fi
if [ -n "$NOVA_INSTANCES_PATH" ]; then
    iniset $NOVA_CONF DEFAULT instances_path $NOVA_INSTANCES_PATH
    mkdir -p $NOVA_INSTANCES_PATH
fi
if [ "$API_RATE_LIMIT" != "True" ]; then
    iniset $NOVA_CONF DEFAULT api_rate_limit False
fi

# ``api-paste.ini``
# Get template from source and migrate auth settings

[[ -r $NOVA_API_PASTE_INI.$START_RELEASE ]] || \
    cp -p $NOVA_API_PASTE_INI $NOVA_API_PASTE_INI.$START_RELEASE
cp $NOVA_DIR/etc/nova/api-paste.ini $NOVA_API_PASTE_INI

for key in auth_host auth_port auth_protocol admin_tenant_name admin_user admin_password; do
    iniset $NOVA_API_PASTE_INI filter:authtoken $key $(iniget $NOVA_API_PASTE_INI.$START_RELEASE filter:authtoken $key)
done

# ``policy.json``
# New file
cp -p $NOVA_DIR/etc/nova/policy.json $NOVA_CONF_DIR

# rootwrap

# If Nova ships the new rootwrap filters files, deploy them
# (owned by root) and add a parameter to ``$NOVA_ROOTWRAP``
ROOTWRAP_SUDOER_CMD="$NOVA_ROOTWRAP"
if [[ -d $NOVA_DIR/etc/nova/rootwrap.d ]]; then
    configure_nova_rootwrap
fi

#-root_helper=sudo /usr/local/bin/nova-rootwrap
#+root_helper=sudo /usr/local/bin/nova-rootwrap /etc/nova/rootwrap.conf
#iniset $NOVA_CONF DEFAULT root_helper "sudo $ROOTWRAP_SUDOER_CMD"
inicomment $NOVA_CONF DEFAULT root_helper
iniset $NOVA_CONF DEFAULT rootwrap_config $NOVA_CONF_DIR/rootwrap.conf

# Migrate the database
nova-manage --config-file $NOVA_CONF db sync || die "DB sync error"

# Update noVNC to new repo
if is_service_enabled n-novnc; then
    [[ -d $NOVNC_DIR.$START_RELEASE ]] || mv $NOVNC_DIR $NOVNC_DIR.$START_RELEASE
    # a websockets/html5 or flash powered VNC console for vm instances
    git_clone $NOVNC_REPO $NOVNC_DIR $NOVNC_BRANCH
fi

# Start Nova
# n-api is started independently in stack.sh
screen_it n-api "cd $NOVA_DIR && $NOVA_BIN_DIR/nova-api"

start_nova

is_service_enabled swift3 || screen_it n-obj "cd $NOVA_DIR && $NOVA_BIN_DIR/nova-objectstore"

set +o xtrace
echo "*********************************************************************"
echo "SUCCESS: End $0"
echo "*********************************************************************"
