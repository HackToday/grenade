#!/usr/bin/env bash

# ``upgrade-keystone``

echo "*********************************************************************"
echo "Begin $0"
echo "*********************************************************************"

# Clean up any resources that may be in use
cleanup() {
    set +o errexit

    echo "*********************************************************************"
    echo "ERROR: Abort $0"
    echo "*********************************************************************"

    # Kill ourselves to signal any calling process
    trap 2; kill -2 $$
}

trap cleanup SIGHUP SIGINT SIGTERM

# Keep track of the grenade directory
GRENADE_DIR=$(cd $(dirname "$0") && pwd)

# Import common functions
source $GRENADE_DIR/functions

# Determine what system we are running on.  This provides ``os_VENDOR``,
# ``os_RELEASE``, ``os_UPDATE``, ``os_PACKAGE``, ``os_CODENAME``
# and ``DISTRO``
GetDistro

# Source params
source $GRENADE_DIR/grenaderc

# This script exits on an error so that errors don't compound and you see
# only the first error that occured.
set -o errexit

# Print the commands being run so that we can see the command that triggers
# an error.  It is also useful for following allowing as the install occurs.
set -o xtrace

# Set for DevStack compatibility
TOP_DIR=$TARGET_DEVSTACK_DIR


# Upgrade Keystone
# ================

# Kill a running Keystone
screen -S $SCREEN_NAME -p key -X kill

MYSQL_HOST=${MYSQL_HOST:-localhost}
MYSQL_USER=${MYSQL_USER:-root}
BASE_SQL_CONN=$(source $BASE_DEVSTACK_DIR/stackrc; echo ${BASE_SQL_CONN:-mysql://$MYSQL_USER:$MYSQL_PASSWORD@$MYSQL_HOST})

# Duplicate some setup bits from target DevStack
cd $TARGET_DEVSTACK_DIR
source $TARGET_DEVSTACK_DIR/stackrc
SERVICE_HOST=${SERVICE_HOST:-localhost}
S3_SERVICE_PORT=${S3_SERVICE_PORT:-8080}
source $TARGET_DEVSTACK_DIR/lib/database

# Get functions from current DevStack
source $TARGET_DEVSTACK_DIR/lib/keystone

# install_keystone()
install_keystoneclient
install_keystone

configure_keystoneclient

# Save current conf files for some reason...
[[ -r $KEYSTONE_CONF.$BASE_RELEASE ]] || cp -p $KEYSTONE_CONF $KEYSTONE_CONF.$BASE_RELEASE
[[ -r $KEYSTONE_CONF_DIR/policy.json.$BASE_RELEASE ]] || cp -p $KEYSTONE_CONF_DIR/policy.json $KEYSTONE_CONF_DIR/policy.json.$BASE_RELEASE

# We make the same changes to the Grizzly keystone.conf (so far) so just
# do a normal configure_keystone().
configure_keystone

# Simulate init_keystone()
# Migrate the database
keystone-manage db_sync || die "DB sync error"

# Set up certificates
keystone-manage pki_setup || die "PKI setup error"


### Fix a missed upgrade bit

# Table 'role' column 'extra' is varchar(64) when upgraded from folsom
# and varchar(255) when created in trunk.  The upgraded value is NULL
# while the trunk value is '{}'.  Oops!
mysql -uroot -psuperstack keystone -e "alter table role modify name varchar(255);update role set extra = '{}';"


# Start Keystone
start_keystone

set +o xtrace
echo "*********************************************************************"
echo "SUCCESS: End $0"
echo "*********************************************************************"
